{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Godot Autogen Docs Godot addon that automatically turns your code comments into markdown, for use in documentation.","title":"Welcome"},{"location":"#godot-autogen-docs","text":"Godot addon that automatically turns your code comments into markdown, for use in documentation.","title":"Godot Autogen Docs"},{"location":"SUMMARY/","text":"Welcome User Guide Developer Guide API Reference About Contributing Changelog License","title":"SUMMARY"},{"location":"about/changelog/","text":"CHANGELOG Inspired from Keep a Changelog [Unreleased] Added Changed Deprecated Removed Fixed Security Dependencies","title":"Changelog"},{"location":"about/changelog/#changelog","text":"Inspired from Keep a Changelog","title":"CHANGELOG"},{"location":"about/changelog/#unreleased","text":"","title":"[Unreleased]"},{"location":"about/changelog/#added","text":"","title":"Added"},{"location":"about/changelog/#changed","text":"","title":"Changed"},{"location":"about/changelog/#deprecated","text":"","title":"Deprecated"},{"location":"about/changelog/#removed","text":"","title":"Removed"},{"location":"about/changelog/#fixed","text":"","title":"Fixed"},{"location":"about/changelog/#security","text":"","title":"Security"},{"location":"about/changelog/#dependencies","text":"","title":"Dependencies"},{"location":"about/contributing/","text":"Contributing We welcome contributions to our open source Godot game project! There are many ways you can help, including reporting bugs, improving documentation, and contributing code. Code of Conduct We value the participation of every member of our community and want to ensure that everyone has an enjoyable and fulfilling experience. As such, we have adopted the Contributor Covenant as our code of conduct. By participating in this project, you agree to abide by its terms. Contributing Code To contribute code to the project, follow these steps: Fork the repository to your own GitHub account. Clone the repository to your local machine. Create a new branch for your changes. Make your changes and commit them to your local repository. Push your changes to your forked repository on GitHub. Create a pull request from your forked repository to the original repository. Please note that all code contributions should pass the continuous integration (CI) checks that are set up for the project. These checks ensure that the code is well-formatted and that tests are passing. Reporting Bugs If you find a bug in the project, please report it by creating an issue in the repository's issue tracker. Be sure to include as much information as possible, including the steps to reproduce the bug and any relevant error messages. Improving Documentation If you would like to improve the documentation for the project, you can do so by submitting a pull request with your changes. Please follow the same process as for contributing code, and make sure that your changes are properly formatted and well-written. Questions and Feedback If you have any questions or feedback about the project, don't hesitate to reach out! You can create an issue in the repository's issue tracker, or contact us directly through our website or social media channels. Thank you for considering contributing to our open source Godot game project! We appreciate your help and look forward to working with you.","title":"Contributing"},{"location":"about/contributing/#contributing","text":"We welcome contributions to our open source Godot game project! There are many ways you can help, including reporting bugs, improving documentation, and contributing code.","title":"Contributing"},{"location":"about/contributing/#code-of-conduct","text":"We value the participation of every member of our community and want to ensure that everyone has an enjoyable and fulfilling experience. As such, we have adopted the Contributor Covenant as our code of conduct. By participating in this project, you agree to abide by its terms.","title":"Code of Conduct"},{"location":"about/contributing/#contributing-code","text":"To contribute code to the project, follow these steps: Fork the repository to your own GitHub account. Clone the repository to your local machine. Create a new branch for your changes. Make your changes and commit them to your local repository. Push your changes to your forked repository on GitHub. Create a pull request from your forked repository to the original repository. Please note that all code contributions should pass the continuous integration (CI) checks that are set up for the project. These checks ensure that the code is well-formatted and that tests are passing.","title":"Contributing Code"},{"location":"about/contributing/#reporting-bugs","text":"If you find a bug in the project, please report it by creating an issue in the repository's issue tracker. Be sure to include as much information as possible, including the steps to reproduce the bug and any relevant error messages.","title":"Reporting Bugs"},{"location":"about/contributing/#improving-documentation","text":"If you would like to improve the documentation for the project, you can do so by submitting a pull request with your changes. Please follow the same process as for contributing code, and make sure that your changes are properly formatted and well-written.","title":"Improving Documentation"},{"location":"about/contributing/#questions-and-feedback","text":"If you have any questions or feedback about the project, don't hesitate to reach out! You can create an issue in the repository's issue tracker, or contact us directly through our website or social media channels. Thank you for considering contributing to our open source Godot game project! We appreciate your help and look forward to working with you.","title":"Questions and Feedback"},{"location":"about/license/","text":"Copyright \u00a9 2022-present Florian Vazelle Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"dev-guide/api-ref/cli.gd/","text":"class cli.gd extends [\"SceneTree\"] const TEMPLATE_DIRECTORY const TemplateEngine const Collector var directories A list of directories to collect files from. var is_recursive If true, explore each directory recursively var patterns A list of patterns to filter files. var output_directory A directory for saving files. func _process Parameters : _delta ( Variant ) Return type : bool func generate_reference Parameters : Return type : Dictionary func load_file Parameters : path ( String ) Return type : String func save_file Parameters : content ( String ) path ( String ) Return type : null func render Parameters : reference ( Dictionary ) template_path ( String ) output_dirpath ( String ) Return type : null","title":"Cli.gd"},{"location":"dev-guide/api-ref/collector.gd/","text":"class collector.gd extends [\"SceneTree\"] var warnings_regex func _init Parameters : Return type : res://addons/godot-autogen-docs/collector.gd func find_files Returns a list of file paths found in the directory. Parameters : dirpath ( String ) patterns ( PackedStringArray ) is_recursive ( bool ) _do_skip_hidden ( bool ) Return type : PackedStringArray func save_text Saves text to a file. Parameters : path ( String ) content ( String ) Return type : null func get_reference Parses a list of GDScript files and returns a list of dictionaries with the code reference data. If `refresh_cache` is true, will refresh Godot's cache and get fresh symbols. Parameters : files ( PackedStringArray ) refresh_cache ( bool ) Return type : Dictionary","title":"Collector.gd"},{"location":"dev-guide/api-ref/template_engine.gd/","text":"class template_engine.gd extends [] static func replace_variable Parameters : template ( String ) placeholder_key ( String ) value ( Variant ) Return type : String static func render_dictionary Iterate through the keys in the dictionary and recursively replace placeholders Parameters : template ( String ) placeholder_key ( String ) data ( Dictionary ) Return type : String static func tokenize_template Tokenizes the template into individual elements for processing Parameters : template ( String ) placeholder_key ( String ) Return type : Array static func render_forloops Renders for-loops in the template with the provided data Parameters : template ( String ) data ( Dictionary ) placeholder_key ( String ) Return type : String static func _render_forloops Parameters : template ( String ) data ( Dictionary ) forloops_block ( String ) data_key ( String ) loop_variable ( String ) loop_content ( String ) Return type : String static func render_template Define a static function to render a template with data Parameters : template ( String ) data ( Dictionary ) Return type : String","title":"Template engine.gd"},{"location":"user-guide/","text":"Command Line Interface The Godot Autogen Docs tool provides a command-line interface for generating documentation from Godot Engine scripts. This guide outlines the available commands and options. Usage $ godot --editor --headless --quit --script res://addons/godot-autogen-docs/cli.gd <command> [<option> ...] Commands markdown Export documentation to markdown. readthedocs Export documentation to markdown compatible with the readthedocs theme. Options -ddir Comma-delimited list of directories to collect files from. -doutdir A directory for saving documentation files. Example Usage Display the help Text $ godot --editor --headless --quit --script res://addons/godot-autogen-docs/cli.gd help Export Documentation to Markdown $ godot --editor --headless --quit --script res://addons/godot-autogen-docs/cli.gd markdown -ddir \"path/to/scripts\" -doutdir \"path/to/output\" Export Documentation for ReadTheDocs $ godot --editor --headless --quit --script res://addons/godot-autogen-docs/cli.gd readthedocs -ddir \"path/to/scripts\" -doutdir \"path/to/output\" Notes The markdown command exports documentation in regular markdown format. The readthedocs command exports documentation in markdown compatible with the readthedocs theme.","title":"Index"},{"location":"user-guide/#command-line-interface","text":"The Godot Autogen Docs tool provides a command-line interface for generating documentation from Godot Engine scripts. This guide outlines the available commands and options.","title":"Command Line Interface"},{"location":"user-guide/#usage","text":"$ godot --editor --headless --quit --script res://addons/godot-autogen-docs/cli.gd <command> [<option> ...]","title":"Usage"},{"location":"user-guide/#commands","text":"markdown Export documentation to markdown. readthedocs Export documentation to markdown compatible with the readthedocs theme.","title":"Commands"},{"location":"user-guide/#options","text":"-ddir Comma-delimited list of directories to collect files from. -doutdir A directory for saving documentation files.","title":"Options"},{"location":"user-guide/#example-usage","text":"Display the help Text $ godot --editor --headless --quit --script res://addons/godot-autogen-docs/cli.gd help Export Documentation to Markdown $ godot --editor --headless --quit --script res://addons/godot-autogen-docs/cli.gd markdown -ddir \"path/to/scripts\" -doutdir \"path/to/output\" Export Documentation for ReadTheDocs $ godot --editor --headless --quit --script res://addons/godot-autogen-docs/cli.gd readthedocs -ddir \"path/to/scripts\" -doutdir \"path/to/output\"","title":"Example Usage"},{"location":"user-guide/#notes","text":"The markdown command exports documentation in regular markdown format. The readthedocs command exports documentation in markdown compatible with the readthedocs theme.","title":"Notes"}]}